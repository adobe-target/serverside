const CookiesClient = require("cookies");

const MASTER_COOKIE = "mbox";
const HASH = "#";
const PIPE = "|";

function createCookie(name, value, expires) {
  return {
    name: name,
    value: value,
    expires: expires
  };
}

function serializeCookie(cookie) {
  return [encodeURIComponent(cookie.name), encodeURIComponent(cookie.value), cookie.expires].join(HASH);
}

function deserializeCookie(str) {
  const parts = str.split(HASH);
  const len = parts.length;

  if (len === 0 || len < 3) {
    return null;
  }

  if (isNaN(parseInt(parts[2], 10))) {
    return null;
  }

  return createCookie(decodeURIComponent(parts[0]), decodeURIComponent(parts[1]), Number(parts[2]));
}

function getInternalCookies(cookieValue) {
  if (!cookieValue) {
    return [];
  }

  return cookieValue.split(PIPE);
}

function getExpires(cookie) {
  return cookie.expires;
}

function getMaxExpires(cookies) {
  return Math.max.apply(null, cookies.map(getExpires));
}

function readCookies(cookiesClient) {
  const masterCookie = cookiesClient.get(MASTER_COOKIE);
  const rawInternalCookies = getInternalCookies(masterCookie);
  const internalCookies = rawInternalCookies.map(x => deserializeCookie(x));
  const nowInSeconds = Math.ceil(Date.now() / 1000);
  const cookiesMap = {};
  const validCookies = internalCookies.filter(cookie => cookie && nowInSeconds <= cookie.expires);

  validCookies.forEach(cookie => cookiesMap[cookie.name] = cookie);

  return cookiesMap;
}

function saveCookies(cookiesClient, cookiesMap) {
  const now = Date.now();
  const cookies = Object.keys(cookiesMap).map(key => cookiesMap[key]);
  const expires = Math.abs(getMaxExpires(cookies) * 1000 - now);
  const serializedCookies = cookies.map(x => serializeCookie(x));
  const cookieOptions = {httpOnly: false, expires: new Date(now + expires)};

  cookiesClient.set(MASTER_COOKIE, serializedCookies.join(PIPE), cookieOptions);
}

module.exports = function createTargetCookies(request, response) {
  const cookiesClient = new CookiesClient(request, response);

  return {
    readCookies: () => readCookies(cookiesClient),
    saveCookies: cookies => saveCookies(cookiesClient, cookies)
  };
};
